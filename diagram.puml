@startuml

package "ascii_output"{
    interface AsciiOutput{
        +out(char[][]): void
    }

    class ConsoleAsciiOutput{
        +out(char[][]): void
    }

    class HtmlAsciiOutput{
        +out(char[][]): void
    }

    ConsoleAsciiOutput --|> AsciiOutput
    HtmlAsciiOutput --|> AsciiOutput
}

package "image"{
    class Image{
        Image(String)
        Image(Color[][], int, int)
        +saveImage(String): void
    }

    class ImageProcessor{
        +padToPowerOfTwo(Image): Image
        +returnSubImages(Image, int): SubImage[][]
        +fillSubImage(int, int, int, Image): SubImage
    }

    class SubImage{
        SubImage(Color[][])
        +calculateBrightness(): double
    }

    ImageProcessor --> Image : takes & returns
    ImageProcessor --> SubImage : returns
}

package "image_char_matching"{
    class CharConverter{
        +converToBoolArray(char): boolean
        -getBufferedImage(char, String, int): BufferedImage
    }

    class SubImgCharMatcher{
        SubImgCharMatcher(char[])
        +addChar(char): void
        +removeChar(char): void
        +getCharByImageBrightness(double, RoundingMode): char
        +normalizeBrightness(): void
    }
    SubImgCharMatcher --> ascii_art.RoundingMode : uses

}

package "ascii_art"{
    enum RoundingMode
    class AsciiArtAlgorithm{
        AsciiArtAlgorithm(Image, int, ImageProcessor,
        SubImgCharMatcher, RoundingMode)
        +run(): char[][]
    }

    class KeyboardInput{
        KeyboardInput()
        +readLine(): String
    }

    class Shell{
        Shell(String)
        +run(String): void
        +main(String[])
    }

    Shell --> AsciiArtAlgorithm: uses
    Shell --> KeyboardInput: uses
    Shell --> Image: creates
    Shell --> ImageProcessor: creates
    Shell --> SubImgCharMatcher: creates
    Shell --> AsciiOutput: creates
    AsciiArtAlgorithm --> RoundingMode : uses


}

@enduml